---
import "../styles/global.css";
import { ViewTransitions } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/blog-placeholder-1.jpg" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link
  rel="icon"
  href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 width=%22256%22 height=%22256%22 viewBox=%220 0 100 100%22><rect width=%22100%22 height=%22100%22 rx=%2220%22 fill=%22%23000000%22></rect><path fill=%22%23fff%22 d=%22M17.30 69.78L17.30 69.78Q14.48 69.78 14.48 67.47L14.48 67.47L14.48 31.31Q15.63 30.16 17.94 30.16L17.94 30.16Q19.47 30.16 20.56 30.77Q21.65 31.38 22.54 32.98L22.54 32.98L34.77 53.46Q35.54 54.80 36.37 56.30Q37.20 57.81 37.97 59.31Q38.74 60.82 39.41 62.13Q40.08 63.44 40.53 64.34L40.53 64.34L40.78 64.27Q40.27 59.09 40.18 53.84Q40.08 48.59 40.08 43.60L40.08 43.60L40.08 30.67Q40.46 30.54 41.10 30.38Q41.74 30.22 42.51 30.22L42.51 30.22Q45.33 30.22 45.33 32.53L45.33 32.53L45.33 68.75Q44.75 69.26 43.86 69.55Q42.96 69.84 41.87 69.84L41.87 69.84Q40.34 69.84 39.25 69.23Q38.16 68.62 37.26 67.02L37.26 67.02L25.10 46.54Q24.34 45.26 23.47 43.73Q22.61 42.19 21.81 40.72Q21.01 39.25 20.34 37.90Q19.66 36.56 19.22 35.66L19.22 35.66L18.96 35.73Q19.28 38.80 19.47 42.74Q19.66 46.67 19.66 50.19L19.66 50.19L19.66 69.33Q19.34 69.46 18.67 69.62Q18 69.78 17.30 69.78ZM85.14 34.83L85.14 34.83Q85.14 35.73 84.59 36.37Q84.05 37.01 83.34 37.33L83.34 37.33Q81.68 36.18 79.44 35.15Q77.20 34.13 73.62 34.13L73.62 34.13Q70.67 34.13 68.18 35.15Q65.68 36.18 63.82 38.16Q61.97 40.14 60.91 43.15Q59.86 46.16 59.86 50.06L59.86 50.06Q59.86 54.03 60.88 56.98Q61.90 59.92 63.73 61.90Q65.55 63.89 68.11 64.88Q70.67 65.87 73.81 65.87L73.81 65.87Q77.14 65.87 79.60 64.94Q82.06 64.02 83.73 62.74L83.73 62.74Q84.37 62.99 84.94 63.66Q85.52 64.34 85.52 65.23L85.52 65.23Q85.52 66.58 83.98 67.66L83.98 67.66Q82.51 68.69 79.95 69.49Q77.39 70.29 73.42 70.29L73.42 70.29Q69.39 70.29 65.94 69.01Q62.48 67.73 59.95 65.20Q57.42 62.67 55.95 58.90Q54.48 55.12 54.48 50.06L54.48 50.06Q54.48 45.01 55.98 41.20Q57.49 37.39 60.05 34.83Q62.61 32.27 66.03 30.99Q69.46 29.71 73.23 29.71L73.23 29.71Q75.86 29.71 78.06 30.16Q80.27 30.61 81.84 31.34Q83.41 32.08 84.27 33.01Q85.14 33.94 85.14 34.83Z%22></path></svg>"
/>
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link
  rel="preload"
  href="/fonts/geist.woff2"
  as="font"
  type="font/woff2"
  crossorigin
/>
<link
  rel="preload"
  href="/fonts/geist-mono.woff2"
  as="font"
  type="font/woff2"
  crossorigin
/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- PageFind -->
<link href="/pagefind/pagefind-ui.css" rel="stylesheet" />
<script is:inline src="/pagefind/pagefind-ui.js"></script>

<ViewTransitions />

<script is:inline>
  function init() {
    preloadTheme();
    onScroll();
    animate();
    addCopyCodeButtons();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    const themeLabel = document.getElementById("theme-label");
    const toggleThemeButton = document.getElementById("toggle-theme-button");

    const updateThemeLabel = (theme) => {
      if (theme === "light") {
        themeLabel.textContent = "Light";
      } else if (theme === "dark") {
        themeLabel.textContent = "Dark";
      } else {
        themeLabel.textContent = "System";
      }
    };

    toggleThemeButton?.addEventListener("click", () => {
      const theme = localStorage.getItem("theme");

      if (theme === "light") {
        localStorage.setItem("theme", "dark");
        toggleTheme(true);
        updateThemeLabel("dark");
      } else if (theme === "dark") {
        localStorage.setItem("theme", "system");
        toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
        updateThemeLabel("system");
      } else {
        localStorage.setItem("theme", "light");
        toggleTheme(false);
        updateThemeLabel("light");
      }
    });

    toggleThemeButton?.addEventListener("mouseover", () => {
      themeLabel.classList.remove("hidden");
    });

    toggleThemeButton?.addEventListener("mouseout", () => {
      themeLabel.classList.add("hidden");
    });
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (event) => {
        if (localStorage.theme === "system") {
          toggleTheme(event.matches);
        }
      });

    document.addEventListener("scroll", onScroll);

    setGiscusTheme();
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 100);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  function toggleTheme(dark) {
    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `,
      ),
    );

    document.head.appendChild(css);

    if (dark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

    window.getComputedStyle(css).opacity;
    document.head.removeChild(css);

    setGiscusTheme();
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;

    if (userTheme === "light" || userTheme === "dark") {
      toggleTheme(userTheme === "dark");
    } else {
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    }
  }

  function addCopyCodeButtons() {
    let copyButtonLabel = "ðŸ“‹";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    async function copyCode(codeBlock, copyButton) {
      const codeText = codeBlock.innerText;
      const buttonText = copyButton.innerText;
      const textToCopy = codeText.replace(buttonText, "");

      await navigator.clipboard.writeText(textToCopy);
      copyButton.innerText = "âœ…";

      setTimeout(() => {
        copyButton.innerText = copyButtonLabel;
      }, 2000);
    }

    for (let codeBlock of codeBlocks) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      const copyButton = document.createElement("button");
      copyButton.innerText = copyButtonLabel;
      copyButton.classList = "copy-code";

      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton?.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }
  }

  const setGiscusTheme = () => {
    const giscus = document.querySelector(".giscus-frame");

    const isDark = document.documentElement.classList.contains("dark");

    if (giscus) {
      const url = new URL(giscus.src);
      url.searchParams.set("theme", isDark ? "noborder_dark" : "noborder_light");
      giscus.src = url.toString();
    }
  };

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
  preloadTheme();
</script>
